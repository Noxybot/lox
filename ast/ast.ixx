//This file was generated by ast_builder.exe v1.0.0
export module ast;

import <any>;
import <memory>;

import core;

export namespace ast
{
struct Binary   ;
struct Grouping ;
struct Literal  ;
struct Unary    ;

struct Visitor
{
	virtual ~Visitor() = default;
	virtual std::any Visit(const Binary   & val) = 0;
	virtual std::any Visit(const Grouping & val) = 0;
	virtual std::any Visit(const Literal  & val) = 0;
	virtual std::any Visit(const Unary    & val) = 0;
};
struct Expr
{
	virtual ~Expr() = default;
	virtual std::any Accept(Visitor& visitor) const = 0;
};

using ExprPtr = std::unique_ptr<Expr>;

struct Binary    : Expr
{
	std::unique_ptr<Expr> left;
	Token op;
	std::unique_ptr<Expr> right;
	explicit Binary   (std::unique_ptr<Expr> left_, Token op_, std::unique_ptr<Expr> right_)
		: left(std::move(left_))
		, op(std::move(op_))
		, right(std::move(right_))
		{}
	std::any Accept(Visitor& visitor) const override
	{
		return visitor.Visit(*this);
	}
};
struct Grouping  : Expr
{
	std::unique_ptr<Expr> expression;
	explicit Grouping (std::unique_ptr<Expr> expression_)
		: expression(std::move(expression_))
		{}
	std::any Accept(Visitor& visitor) const override
	{
		return visitor.Visit(*this);
	}
};
struct Literal   : Expr
{
	LiteralT value;
	explicit Literal  (LiteralT value_)
		: value(std::move(value_))
		{}
	std::any Accept(Visitor& visitor) const override
	{
		return visitor.Visit(*this);
	}
};
struct Unary     : Expr
{
	Token op;
	std::unique_ptr<Expr> right;
	explicit Unary    (Token op_, std::unique_ptr<Expr> right_)
		: op(std::move(op_))
		, right(std::move(right_))
		{}
	std::any Accept(Visitor& visitor) const override
	{
		return visitor.Visit(*this);
	}
};
}//namespace ast
